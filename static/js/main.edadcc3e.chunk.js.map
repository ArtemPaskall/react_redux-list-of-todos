{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelect","selectedUserId","useState","query","setQuery","selectItems","setSelectItems","visibleTodos","setVisibleTodos","useEffect","filteredTodos","filter","todo","title","includes","toLocaleLowerCase","item","completed","className","htmlFor","type","id","value","onChange","event","target","length","map","classNames","checked","userId","onClick","API_URL","request","url","fetch","then","response","json","CurrentUser","clearUser","user","setUser","userFromServer","name","email","phone","App","setTodos","setSelectedUserId","todosFromServer","userID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edadcc3e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  onSelect: (userID: number) => void;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onSelect, selectedUserId }) => {\n  const [query, setQuery] = useState('');\n  const [selectItems, setSelectItems] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    let filteredTodos = todos.filter(todo => (todo.title.includes(query.toLocaleLowerCase())));\n\n    if (selectItems === 'Completed') {\n      filteredTodos = filteredTodos.filter(item => (item.completed === true));\n    }\n\n    if (selectItems === 'Active') {\n      filteredTodos = filteredTodos.filter(item => (item.completed === false));\n    }\n\n    setVisibleTodos(filteredTodos);\n  }, [todos, query, selectItems]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label htmlFor=\"search\">\n        Search by title\n        <input\n          type=\"text\"\n          id=\"search\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n      </label>\n      <select\n        value={selectItems}\n        onChange={(event) => setSelectItems(event.target.value)}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Active\">Active</option>\n        <option value=\"Completed\">Completed</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.length ? (\n            <>\n              {visibleTodos.map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item',\n                    { 'TodoList__item--unchecked': todo.completed === false },\n                    { 'TodoList__item--checked': todo.completed === true })}\n                >\n                  <label htmlFor={`${todo.id}`}>\n                    <input\n                      type=\"checkbox\"\n                      id={`${todo.id}`}\n                      checked={todo.completed}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                      'button',\n                    )}\n                    type=\"button\"\n                    onClick={() => onSelect(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n            </>\n\n          ) : <p>No matches found</p>}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api`;\n\nfunction request(url: string) {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport const getTodos = () => {\n  return request(`${API_URL}/todos`);\n};\n\nexport const getUsers = (id: number): Promise<User> => {\n  return request(`${API_URL}/users/${id}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUsers(userId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {user?.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </>\n      ) : <p> Loading...</p>}\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {todos.length ? (\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onSelect={(userID: number) => {\n              setSelectedUserId(userID);\n            }}\n          />\n        ) : 'Loading...'}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={() => setSelectedUserId(0)}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}