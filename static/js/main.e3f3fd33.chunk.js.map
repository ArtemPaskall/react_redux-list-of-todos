{"version":3,"sources":["types.ts","store/store.ts","api/api.ts","store/selectors.ts","store/actions.ts","Components/TodoList/TodoList.tsx","Components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionsTypes","initialState","todos","selectedUserId","store","createStore","state","action","type","AddTodos","payload","SetSelectedUserId","composeWithDevTools","API_URL","request","url","fetch","then","response","json","getTodosSelector","getSelectedUserId","ACTIONS","TodoList","selectUserId","useState","query","setQuery","selectItems","setSelectItems","useSelector","dispatch","useDispatch","visibleTodos","useMemo","filteredTodos","filter","el","title","toLocaleLowerCase","includes","item","completed","className","htmlFor","id","value","onChange","event","target","length","map","todo","classNames","defaultChecked","userId","onClick","CurrentUser","user","setUser","useEffect","userFromServer","name","email","phone","App","addTodos","todosFS","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3f3fd33.chunk.js","sourcesContent":["/// <reference types=\"react-scripts\" />\nimport { Action as BaseAction } from 'redux';\n\nexport type Todo = {\n  id: number,\n  createdAt: string,\n  userId: number,\n  title: string,\n  completed: boolean,\n};\n\nexport type User = {\n  id: number,\n  createdAt: string,\n  updatedAt: string,\n  name: string,\n  username: string,\n  email: string,\n  phone: string,\n  website: string\n};\n\nexport type State = {\n  todos: Todo[],\n  selectedUserId: number,\n};\n\ninterface Action<T, P> extends BaseAction<T> {\n  payload: P\n}\n\nexport enum ActionsTypes {\n  AddTodos = 'addTodos',\n  AddTodo = 'addTodo',\n  SetSelectedUserId = 'selectedUserId',\n  FilterTodos = 'filterTodos',\n  SearchTitleTodos = 'searchTitleTodos',\n}\n\nexport type AddTodosAction = Action<ActionsTypes.AddTodos, Todo[]>;\nexport type AddTodoAction = BaseAction<ActionsTypes.AddTodo>;\nexport type SetSelectedUserIdAction\n  = Action<ActionsTypes.SetSelectedUserId, number>;\n\nexport type Actions = AddTodosAction\n| AddTodoAction\n| SetSelectedUserIdAction;\n","import { createStore, Reducer, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { State, Actions, ActionsTypes } from '../types';\n\nconst initialState: State = {\n  todos: [],\n  selectedUserId: 0,\n};\n\nconst reducer: Reducer<State, Actions>\n= (state = initialState, action): State => {\n  switch (action.type) {\n    case ActionsTypes.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n\n    case ActionsTypes.SetSelectedUserId:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store: Store<State, Actions>\n  = createStore(reducer, composeWithDevTools());\n","import { Todo, User } from '../types';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nfunction request(url: string) {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport const getTodos = ():Promise<Todo[]> => {\n  return request(`${API_URL}/todos`);\n};\n\nexport const getUsers = (id: number): Promise<User> => {\n  return request(`${API_URL}/users/${id}`);\n};\n","import { State, Todo } from '../types';\n\nexport const getTodosSelector = (state: State): Todo[] => state.todos;\nexport const getSelectedUserId = (state: State): number => state.selectedUserId;\n","import {\n  AddTodosAction, ActionsTypes,\n  Todo, SetSelectedUserIdAction,\n} from '../types';\n\nexport const addTodos = (payload: Todo[]): AddTodosAction => ({\n  type: ActionsTypes.AddTodos,\n  payload,\n});\n\nexport const selectUserId\n  = (payload: number): SetSelectedUserIdAction => ({\n    type: ActionsTypes.SetSelectedUserId,\n    payload,\n  });\n\nexport const ACTIONS = {\n  addTodos,\n  selectUserId,\n};\n","import './TodoList.scss';\nimport React, { useState, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { getTodosSelector, getSelectedUserId } from '../../store/selectors';\nimport { ACTIONS } from '../../store/actions';\n// import { Todo } from '../../types';\n\nexport const TodoList:React.FC = () => {\n  const { selectUserId } = ACTIONS;\n  const [query, setQuery] = useState('');\n  const [selectItems, setSelectItems] = useState('');\n  const todos = useSelector(getTodosSelector);\n  const selectedUserId = useSelector(getSelectedUserId);\n  const dispatch = useDispatch();\n\n  const visibleTodos = useMemo(() => {\n    let filteredTodos = todos.filter((el) => el.title.toLocaleLowerCase()\n      .includes(query.toLocaleLowerCase()));\n\n    if (selectItems === 'Completed') {\n      filteredTodos = filteredTodos.filter(item => (item.completed === true));\n    }\n\n    if (selectItems === 'Active') {\n      filteredTodos = filteredTodos.filter(item => (item.completed === false));\n    }\n\n    return filteredTodos;\n  }, [todos, query, selectItems]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"filter-bar\">\n        <label\n          htmlFor=\"search\"\n          className=\"search-label\"\n        >\n          Search by title:\n          <input\n            type=\"text\"\n            id=\"search\"\n            className=\"search-input\"\n            value={query}\n            onChange={(event) => setQuery(event.target.value)}\n          />\n        </label>\n        <label\n          htmlFor=\"filter\"\n          className=\"filter-label\"\n        >\n          Filter todos:\n          <select\n            id=\"filter\"\n            className=\"filter-input\"\n            value={selectItems}\n            onChange={(event) => setSelectItems(event.target.value)}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.length ? (\n            <>\n              {visibleTodos.map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item',\n                    { 'TodoList__item--unchecked': todo.completed === false },\n                    { 'TodoList__item--checked': todo.completed === true })}\n                >\n                  <label htmlFor={`${todo.id}`}>\n                    <input\n                      type=\"checkbox\"\n                      id={`${todo.id}`}\n                      defaultChecked={todo.completed}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n                  <div>\n                    <button\n                      className={classNames(\n                        'TodoList__user-button',\n                        {\n                          'TodoList__user-button--selected':\n                          todo.userId === selectedUserId,\n                        },\n                        'button',\n                      )}\n                      type=\"button\"\n                      onClick={() => dispatch(selectUserId(todo.userId))}\n                    >\n                      User&nbsp;#\n                      {todo.userId}\n                    </button>\n                    <button\n                      className={classNames(\n                        'TodoList__user-button',\n                        {\n                          'TodoList__user-button--selected':\n                            todo.userId === selectedUserId,\n                        },\n                        'button',\n                      )}\n                      type=\"button\"\n                      onClick={() => dispatch(selectUserId(0))}\n                    >\n                      X\n                    </button>\n                  </div>\n                </li>\n              ))}\n            </>\n\n          ) : <p>No matches found</p>}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './CurrentUser.scss';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getUsers } from '../../api/api';\nimport { getSelectedUserId } from '../../store/selectors';\nimport { User } from '../../types';\n\nexport const CurrentUser: React.FC = () => {\n  const selectedUserId = useSelector(getSelectedUserId);\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUsers(selectedUserId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {user?.id}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        </>\n      ) : <p> Loading...</p>}\n\n    </div>\n  );\n};\n","import './App.scss';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from './api/api';\nimport { getTodosSelector, getSelectedUserId } from './store/selectors';\nimport { ACTIONS } from './store/actions';\nimport { TodoList } from './Components/TodoList/TodoList';\nimport { CurrentUser } from './Components/CurrentUser/CurrentUser';\n\nexport const App:React.FC = () => {\n  const todos = useSelector(getTodosSelector);\n  const selectedUserId = useSelector(getSelectedUserId);\n  const dispatch = useDispatch();\n  const { addTodos } = ACTIONS;\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFS => dispatch(addTodos(todosFS)));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {todos.length ? (\n          <TodoList />\n        ) : 'Loading...'}\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}